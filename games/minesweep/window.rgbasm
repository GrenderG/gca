include "board.rgbinc"
include "data.rgbinc"
include "memory.rgbinc"
include "utils.rgbinc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

WINDOW_X						equ (7)
WINDOW_HIDE_Y					equ (SCRN_Y)
WINDOW_LINES_COUNT				equ (7)
WINDOW_SHOW_Y					equ (SCRN_Y - WINDOW_LINES_COUNT * TILE_SIDE)
WINDOW_TITLE_ROW				equ (1)
WINDOW_TITLE_TILES_COUNT		equ (4)
WINDOW_TITLE_COLUMN				equ ((SCRN_X_B - WINDOW_TITLE_TILES_COUNT) / 2)

WINDOW_DESCRIPTION_MARGIN		equ (3)
WINDOW_DESCRIPTION_CONTENT		equ (SCRN_X_B - (WINDOW_DESCRIPTION_MARGIN * 2) - 2)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; helpers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; init an action description line in the window
; \1 -> action start tile
; \2 -> action tile's count
; \3 -> description start tile
; \4 -> description tile's count
macro InitWindowActionDescriptionLine
	; left border and margin
	ld_hli_v8 TILE_WINDOW_LEFT
	rept WINDOW_DESCRIPTION_MARGIN
		ld_hli_v8 TILE_WINDOW_PLAIN
	endr

	; action
REPT_TILE_INDEX = 0
	rept \2
		ld_hli_v8 \1 + REPT_TILE_INDEX
REPT_TILE_INDEX = (REPT_TILE_INDEX + 1)
	endr

	; space between action and description
	rept WINDOW_DESCRIPTION_CONTENT - (\2 + \4)
		ld_hli_v8 TILE_WINDOW_PLAIN
	endr

	; description
REPT_TILE_INDEX = 0
	rept \4
		ld_hli_v8 \3 + REPT_TILE_INDEX
REPT_TILE_INDEX = (REPT_TILE_INDEX + 1)
	endr

	; right margin and border
	rept WINDOW_DESCRIPTION_MARGIN
		ld_hli_v8 TILE_WINDOW_PLAIN
	endr
	ld_hli_v8 TILE_WINDOW_RIGHT

	; move the next line in the window
	ld de, SCRN_VX_B - SCRN_X_B
	add hl, de
endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; exports
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "window", rom0

; init the window
; must be called when LCD is off
InitWindow::
	; position the window
	ld a, WINDOW_X
	ld [rWX], a
	ld a, WINDOW_HIDE_Y
	ld [rWY], a

	; init the tiles map
	ld hl, _SCRN1
		; top line
		ld_hli_v8 TILE_WINDOW_TOP_LEFT
		rept SCRN_X_B - 2
			ld_hli_v8 TILE_WINDOW_TOP
		endr
		ld_hli_v8 TILE_WINDOW_TOP_RIGHT
		ld de, SCRN_VX_B - SCRN_X_B
		add hl, de

		; title line (initialized as empty) + an additional empty line
		ld c, 2
		.title
			ld_hli_v8 TILE_WINDOW_LEFT
			rept SCRN_X_B - 2
				ld_hli_v8 TILE_WINDOW_PLAIN
			endr
			ld_hli_v8 TILE_WINDOW_RIGHT
			ld de, SCRN_VX_B - SCRN_X_B
			add hl, de

			dec c
			jr nz, .title

		; button descriptions
		InitWindowActionDescriptionLine TILE_WINDOW_BUTTON_A, 1, TILE_WINDOW_FLAG_TILE, 5
		InitWindowActionDescriptionLine TILE_WINDOW_BUTTON_B, 1, TILE_WINDOW_UNCOVER_TILE, 6
		InitWindowActionDescriptionLine TILE_WINDOW_BUTTON_START, 3, TILE_WINDOW_NEW_GAME, 5

		; bottom line
		ld_hli_v8 TILE_WINDOW_BOTTOM_LEFT
		rept SCRN_X_B - 2
			ld_hli_v8 TILE_WINDOW_BOTTOM
		endr
		ld_hli_v8 TILE_WINDOW_BOTTOM_RIGHT

	; set the default title tile
	ld a, TILE_WINDOW_TITLE_WELCOME
	ld [HRAM_WINDOW_TITLE_TILE], a

	ret

; hide the window
; should be called during vblank or when lcd is off
HideWindow::
	ld a, WINDOW_HIDE_Y
	ld [rWY], a
	ret

; show the window and update the title tile
; must be called during vblank or when lcd is off
ShowWindow::
	ld a, WINDOW_SHOW_Y
	ld [rWY], a

	ld hl, _SCRN1 + (WINDOW_TITLE_ROW * SCRN_VX_B) + WINDOW_TITLE_COLUMN
	ld a, [HRAM_WINDOW_TITLE_TILE]
	ld b, a
	rept 4
		ld_hli_v8 b
		inc b
	endr
	ret

